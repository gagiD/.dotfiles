#+STARTUP: overview
#+TITLE: gagiD Emacs
#+CREATOR: gagiD
#+LANGUAGE: en
#+OPTIONS: num:nil

* Packages
#+begin_src emacs-lisp
  (setq use-package-always-ensure t)

  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+end_src

* Better defaults
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p) ; simpler

  (delete-selection-mode t) ; delete selection
  (transient-mark-mode t)   ; delete selection on type?

  (setq global-auto-revert-non-file-buffers t)
  (global-auto-revert-mode 1) ; reload buffer

  ;(setq ring-bell-function 'ignore) ; people say this is anoying
  ;(setq visible-bell t)

  ;(setq save-interprogram-paste-before-kill t)

  (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
        url-history-file (expand-file-name "url/history" user-emacs-directory))

    ;; Keep customization settings in a temporary file (thanks Ambrevar!)
  (setq custom-file
        (if (boundp 'server-socket-dir)
            (expand-file-name "custom.el" server-socket-dir)
          (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  (load custom-file t)


;  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(global-prettify-symbols-mode t)
#+end_src

* Look
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (set-frame-font "FiraCode Nerd Font Mono-14")
  (add-to-list 'default-frame-alist '(font . "FiraCode Nerd Font Mono-14" ))
  (set-face-attribute 'default t :font "FiraCode Nerd Font Mono-14" )

  (tool-bar-mode   -1)
  (menu-bar-mode   -1)
  (scroll-bar-mode -1)

  (setq sentence-end-double-space nil)

  (set-fringe-mode 10)

  (column-number-mode)
  (dolist (mode '(text-mode-hook
                  prog-mode-hook
                  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))

  ;; Override some modes which derive from the above
  (dolist (mode '(org-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

    (use-package beacon
      :config (beacon-mode 1))

  (use-package emojify
    :config (add-hook 'after-init-hook #'global-emojify-mode))

  (setq scroll-conservatively 10000)

  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
#+end_src

* Theme
#+begin_src emacs-lisp
      (use-package doom-themes
          :config
          (load-theme 'doom-one t)

          (doom-themes-visual-bell-config)

          (setq doom-themes-treemacs-theme "doom-colors")
          (doom-themes-treemacs-config)
          (doom-themes-org-config))

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))


    (use-package treemacs
          :ensure t
          :defer t
          :init
          (with-eval-after-load 'winum
            (define-key winum-keymap (kbd "M-0") #'treemacs-select-window)))


          (use-package treemacs-projectile
            :after (treemacs projectile)
            :ensure t)
#+end_src

* Configs
 #+BEGIN_SRC emacs-lisp
  (defun visit-config ()
    (interactive)
    (find-file (expand-file-name "~/.config/emacs/MyInit.org" )))

  (global-set-key (kbd "C-c e") 'visit-config)

  (defun visit-init ()
      (interactive)
      (find-file (expand-file-name "~/.config/emacs/init.el" user-emacs-directory)))

  (global-set-key (kbd "C-c i") 'visit-init)

  (defun reload-config ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.config/emacs/MyInit.org" user-emacs-directory)))

  (global-set-key (kbd "C-c r") 'reload-config)
#+END_SRC

* Editing
#+begin_src emacs-lisp
(prefer-coding-system 'utf-8-unix)
#+end_src

* Search
#+begin_src emacs-lisp
      (use-package avy
          :bind ("M-s" . avy-goto-char))

    (use-package swiper
        :bind ("C-s" . swiper))

  (use-package ivy
      :bind
      ("C-x C-r" . ivy-resume)
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history))

      (use-package counsel
        :bind
        ("M-x" . counsel-M-x)
        ("C-x C-m" . counsel-M-x)
        ("C-x C-f" . counsel-find-file)
        ("C-x c k" . counsel-yank-pop)
         ("C-M-l" . counsel-imenu)
         :config
  (setq ivy-initial-inputs-alist nil))
#+end_src

* Help
#+begin_src emacs-lisp
    (use-package which-key
        :init (which-key-mode)
        :diminish which-key-mode
        :config (which-key-setup-side-window-right)
        :bind ("C-h C-k" . which-key-show-top-level))

  (use-package guru-mode
  :commands (guru-global-mode))
#+end_src

* Org
 #+BEGIN_SRC emacs-lisp
            (require 'org-tempo)

          (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
          (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
          (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
          (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
          (add-to-list 'org-structure-template-alist '("py" . "src python"))
          (add-to-list 'org-structure-template-alist '("go" . "src go"))
          (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
          (add-to-list 'org-structure-template-alist '("json" . "src json"))

              (use-package org
        :hook ((org-mode . visual-line-mode)
               (org-mode . org-indent-mode)))

      (use-package org-bullets :hook (org-mode . org-bullets-mode))

    (setq org-ellipsis "â¤µ")
  (setq org-hide-leading-stars t)
(setq org-src-fontify-natively t)
#+END_SRC


* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)
    (setq magit-completing-read-function 'ivy-completing-read)
    :bind
    ("C-x g s" . magit-status)
    ("C-x g x" . magit-checkout)
    ("C-x g c" . magit-commit)
    ("C-x g p" . magit-push)
    ("C-x g u" . magit-pull)
    ("C-x g e" . magit-ediff-resolve)
    ("C-x g r" . magit-rebase-interactive))

  (use-package magit-popup)
#+END_SRC

* Dashboard
#+begin_src emacs-lisp
 (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq initial-buffer-choice (lambda () (get-buffer  "*dashboard*")))
    (setq dashboard-center-content t)
    (setq dashboard-items '((projects . 10)
                            (recents  . 5))))
    (setq dashboard-set-init-info t)
    (setq dashboard-set-navigator t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
#+end_src
