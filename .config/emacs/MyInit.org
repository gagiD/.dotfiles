#+STARTUP: overview
#+TITLE: gagiD Emacs
#+CREATOR: gagiD
#+LANGUAGE: en
#+OPTIONS: num:nil

* Better defaults
#+begin_src emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p) ; simpler

    (delete-selection-mode t) ; delete selection
    (transient-mark-mode t)   ; delete selection on type?

    (setq global-auto-revert-non-file-buffers t)
    (global-auto-revert-mode 1) ; reload buffer

    ;(setq ring-bell-function 'ignore) ; people say this is anoying
    (setq visible-bell t)

    ;(setq save-interprogram-paste-before-kill t)

    (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
	  url-history-file (expand-file-name "url/history" user-emacs-directory))

    (setq backup-directory-alist
	`((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
	`((".*" ,temporary-file-directory t)))

  (setq create-lockfiles nil)
  (setq create-backup-files nil)

      ;; Keep customization settings in a temporary file (thanks Ambrevar!)
    (setq custom-file
	  (if (boundp 'server-socket-dir)
	      (expand-file-name "custom.el" server-socket-dir)
	    (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
    (load custom-file t)

  (global-prettify-symbols-mode t)
#+end_src

* Look
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (set-frame-font "FiraCode Nerd Font Mono-16")
  (add-to-list 'default-frame-alist '(font . "FiraCode Nerd Font Mono-16" ))
  (set-face-attribute 'default t :font "FiraCode Nerd Font Mono-16" )

  (tool-bar-mode   -1)
  (menu-bar-mode   -1)
  (scroll-bar-mode -1)

  (setq sentence-end-double-space nil)

  (set-fringe-mode 16)

  (column-number-mode)

  (dolist (mode '(
		  prog-mode-hook
		  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))

  (dolist (mode '(org-mode-hook
		term-mode-hook
		shell-mode-hook
		treemacs-mode-hook
		eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (use-package beacon
    :config (beacon-mode 1))

  (use-package emojify
    :config (add-hook 'after-init-hook #'global-emojify-mode))

  (setq scroll-conservatively 10000)

  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
#+end_src

* Dashboard
#+begin_src emacs-lisp
(use-package
 dashboard
 :config
 (dashboard-setup-startup-hook)
 (setq dashboard-center-content t)
 (setq dashboard-items '((projects . 10) (recents . 5))))

(setq dashboard-set-init-info t)
(setq dashboard-set-navigator t)
(setq dashboard-set-heading-icons t)
(setq dashboard-set-file-icons t)

(if (< (length command-line-args) 2)
    (setq initial-buffer-choice
          (lambda () (get-buffer "*dashboard*"))))
#+end_src

* Theme
#+begin_src emacs-lisp
  (use-package
    doom-themes
   :config (load-theme 'doom-one t)

   (doom-themes-visual-bell-config)

   (setq doom-themes-treemacs-theme "doom-colors")
   (doom-themes-treemacs-config)
   (doom-themes-org-config))

  (use-package all-the-icons)
  (use-package doom-modeline :init (doom-modeline-mode 1))
  (setq doom-modeline-height 42)


  (use-package
   treemacs
   :defer t
   :init
  (setq treemacs-follow-after-init t
	treemacs-is-never-other-window t
	treemacs-sorting 'alphabetic-case-insensitive-asc
	treemacs-persist-file (concat "~/.cache/emacs/" "treemacs-persist")
	treemacs-last-error-persist-file (concat "~/.cache/emacs/" "treemacs-last-error-persist"))
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
   :bind
    ("<f4>" . treemacs)
    :config
    (treemacs-follow-mode -1))

  (use-package treemacs-all-the-icons)

  (use-package treemacs-magit
  :after treemacs magit
  )

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-mode)
  )

  (use-package
   treemacs-projectile
   :after (treemacs projectile)
   )
#+end_src

* Configs
 #+BEGIN_SRC emacs-lisp
  (defun visit-config ()
    (interactive)
    (find-file (expand-file-name "~/.config/emacs/MyInit.org" )))

  (global-set-key (kbd "C-c e") 'visit-config)

  (defun visit-init ()
      (interactive)
      (find-file (expand-file-name "~/.config/emacs/init.el" user-emacs-directory)))

  (global-set-key (kbd "C-c i") 'visit-init)

  (defun reload-config ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.config/emacs/MyInit.org" user-emacs-directory)))

  (global-set-key (kbd "C-c r") 'reload-config)
#+END_SRC

* Editing
#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8-unix)

  (setq god-mode-enable-function-key-translation nil)
  (use-package god-mode
    :bind ("<escape>" . god-mode-all))

  (use-package editorconfig
    :config
    (editorconfig-mode 1))

  (use-package yasnippet
    :diminish yas-minor-mode
    :bind (:map yas-minor-mode-map
		("C-c C-e" . yas-expand)
		("<tab>" . yas-expand))

    :config
    (yas-reload-all)
    (add-hook 'prog-mode-hook #'yas-minor-mode)
    ;;(yas-global-mode 1)
    (setq yas-prompt-functions '(yas-dropdown-prompt
				 yas-ido-prompt
				 yas-completing-prompt)))


  (use-package yasnippet-snippets)
  (add-hook 'prog-mode-hook #'yas-minor-mode)

  (use-package format-all)

  (add-hook 'prog-mode-hook #'format-all-ensure-formatter)
  (add-hook 'prog-mode-hook 'format-all-mode)
#+end_src
* Keybinds
#+begin_src emacs-lisp
(use-package hydra)
#+end_src

* Search
#+begin_src emacs-lisp
      (use-package avy
	:bind
	("M-s" . avy-goto-char)
	("M-S-s" . avy-goto-char-timer))

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)
	   ("C-l" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-l" . ivy-done)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

    (use-package ivy-rich
      :init
    (ivy-rich-mode 1))

      (use-package counsel
	:bind
	("M-x" . counsel-M-x)
	("C-x C-m" . counsel-M-x)
	("C-x C-f" . counsel-find-file)
	("C-x c k" . counsel-yank-pop)
	("C-M-l" . counsel-imenu)
	:config
	(setq ivy-initial-inputs-alist nil))
#+end_src

* Projectile
#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map))

(use-package counsel-projectile
  :config (counsel-projectile-mode))
#+end_src

* LSP
#+begin_src emacs-lisp
    (use-package flycheck
      :init (global-flycheck-mode))

    (use-package lsp-mode
      :init
      (setq lsp-keymap-prefix "C-c l")
      :hook (
	     (prog-mode . lsp-deferred)
	     (lsp-mode . lsp-enable-which-key-integration))
      :commands (lsp lsp-deferred)
      :config
      (setq lsp-prefer-flymake nil
	    lsp-eldoc-enable-hover nil))

    (use-package lsp-ui
      :commands lsp-ui-mode
      :hook (lsp-mode . lsp-ui-mode))

    (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
    (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

    (use-package dap-mode)
    (dap-mode 1)
    (dap-ui-mode 1)
    (dap-tooltip-mode 1)
    (tooltip-mode 1)
    (dap-ui-controls-mode 1)

    (add-hook 'dap-stopped-hook
	    (lambda (arg) (call-interactively #'dap-hydra)))
    (require 'dap-chrome)
    (require 'dap-firefox)
    (require 'dap-node)

    (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
	   ("<tab>" . company-complete-selection))
	  (:map lsp-mode-map
	   ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src

* Programming
** cmn
#+begin_src emacs-lisp
  (use-package tree-sitter)
  (use-package tree-sitter-langs)
  (use-package tree-sitter-indent)
#+end_src

** LISP
#+begin_src emacs-lisp
(use-package elisp-autofmt
  :commands (elisp-autofmt-mode elisp-autofmt-buffer)
  :hook (emacs-lisp-mode . elisp-autofmt-mode))
#+end_src

** Web
#+begin_src emacs-lisp
   (use-package emmet-mode
     :delight
     :hook (css-mode sgml-mode web-mode vue-mode))

  (use-package json-mode)

  (with-eval-after-load 'js
  (define-key js-mode-map (kbd "M-.") nil))

   (use-package web-mode
	 :mode ("\\.html?\\'"
		"\\.php\\'"
		"\\.svelte\\'"
		"\\.jsx\\'"
		"\\.vue\\'"
		))
#+end_src

** c#
#+begin_src emacs-lisp
(use-package csharp-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.cs\\'" . csharp-tree-sitter-mode)))
#+end_src

* Help
#+begin_src emacs-lisp
    (use-package which-key
        :init (which-key-mode)
        :diminish which-key-mode
        :config (which-key-setup-side-window-right)
        :bind ("C-h C-k" . which-key-show-top-level))

  (use-package guru-mode
  :commands (guru-global-mode))
#+end_src

* Org
 #+BEGIN_SRC emacs-lisp
   (require 'org-tempo)

   (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
   (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
   (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
   (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
   (add-to-list 'org-structure-template-alist '("py" . "src python"))
   (add-to-list 'org-structure-template-alist '("go" . "src go"))
   (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
   (add-to-list 'org-structure-template-alist '("json" . "src json"))

   (use-package org
     :hook ((org-mode . visual-line-mode)))

   (use-package org-bullets :hook (org-mode . org-bullets-mode))

   (setq org-ellipsis "â¤µ")
   (setq org-hide-leading-stars t)
   (setq org-src-fontify-natively t)
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)
    (setq magit-completing-read-function 'ivy-completing-read)
    :bind
    ("C-x g s" . magit-status)
    ("C-x g x" . magit-checkout)
    ("C-x g c" . magit-commit)
    ("C-x g p" . magit-push)
    ("C-x g u" . magit-pull)
    ("C-x g e" . magit-ediff-resolve)
    ("C-x g r" . magit-rebase-interactive))

  (use-package magit-popup)
#+END_SRC

